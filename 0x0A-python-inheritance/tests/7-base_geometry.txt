# Importing the module and checking module docstring
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

# Importing the function from the module
>>> BG = __import__("7-base_geometry").BaseGeometry

# Checking for class docstring
>>> c = BG.__doc__
>>> len(c) > 1
True

# Checking for method docstring
>>> mod1 = BG.area.__doc__
>>> len(mod1) > 1
True
>>> mod2 = BG.integer_validator.__doc__
>>> len(mod2) > 1
True

# Checking for area failure
>>> b = BG()
>>> b.area()
Traceback (most recent call last):
...

# Checking integer validator for passing integer
>>> b.integer_validator("integer", 1)

# Checking too many arguments for area
>>> b.area(1)
Traceback (most recent call last):
...

# Checking for integer == 0
>>> b.integer_validator("integer", 0)
Traceback (most recent call last):
...

# Checking for non-integer types
>>> b.integer_validator("bool", True)
Traceback (most recent call last):
...
>>> b.integer_validator("float", 1.5)
Traceback (most recent call last):
...
>>> b.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
...
>>> b.integer_validator("string", "hello")
Traceback (most recent call last):
...
>>> b.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
>>> b.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
...
>>> b.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
...
>>> b.integer_validator("set", {"hello", "world"})
Traceback (most recent call last):
...
>>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
...
>>> b.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
...
>>> b.integer_validator("bytearrays", bytearray(b"bytes"))
Traceback (most recent call last):
...

# Checking for no arguments to integer_validator
>>> b.integer_validator()
Traceback (most recent call last):
...

# Checking for only 1 argument to integer_validator
>>> b.integer_validator("integer")
Traceback (most recent call last):
...

# Checking for too many arguments
>>> b.integer_validator("integer", 1, 2)
Traceback (most recent call last):
...

